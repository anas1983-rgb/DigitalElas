package com.ana.digitalelas

import android.content.Intent
import android.os.Bundle
import android.speech.tts.TextToSpeech
import android.view.View
import android.widget.Button
import android.widget.ImageButton
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import java.util.Locale

class InternetActivity : AppCompatActivity(), TextToSpeech.OnInitListener {

    private lateinit var tts: TextToSpeech
    private var ttsInicializado = false
    private var idioma: String = "pt"
    private var li√ß√£oAtual = 0
    private var audioPausado = false


    // LISTA DE LI√á√ïES DO M√ìDULO INTERNET
    private val li√ß√µesPortugues = listOf(
        Li√ß√£o(
            "Conhecendo a Internet",
            "A internet √© como uma grande cidade digital onde voc√™ pode visitar lugares, conversar com pessoas e aprender coisas novas!\n\n" +
                    "‚Ä¢ Navegador: Seu carro para viajar na internet\n" +
                    "‚Ä¢ Site: Um lugar que voc√™ visita (loja, biblioteca, jornal)\n" +
                    "‚Ä¢ Link: Uma rua que leva a outros lugares\n" +
                    "‚Ä¢ URL: O endere√ßo exato de cada site\n" +
                    "‚Ä¢ Wi-Fi: Conex√£o sem fio com a internet\n\n" +
                    "Dica: A internet √© como uma biblioteca gigante - voc√™ pode encontrar informa√ß√£o sobre qualquer assunto!",
            "üåê",
            "internet_introducao"
        ),
        Li√ß√£o(
            "Meu Primeiro Navegador",
            "O navegador √© o programa que abre as portas da internet. √â como ter um carro para viajar pelo mundo digital!\n\n" +
                    "Partes do navegador:\n" +
                    "‚Ä¢ Barra de endere√ßos: Onde voc√™ digita o destino\n" +
                    "‚Ä¢ Bot√µes voltar/avan√ßar: Como retrovisor do carro\n" +
                    "‚Ä¢ Bot√£o atualizar: Para recarregar a p√°gina\n" +
                    "‚Ä¢ Favoritos: Seus lugares preferidos guardados\n" +
                    "‚Ä¢ Hist√≥rico: Onde voc√™ j√° esteve\n\n" +
                    "Como usar:\n" +
                    "1. Digite o endere√ßo na barra (ex: google.com)\n" +
                    "2. Pressione Enter para viajar\n" +
                    "3. Use os bot√µes para navegar entre p√°ginas",
            "üöó",
            "navegador_partes"
        ),
        Li√ß√£o(
            "Google - Encontrando Tudo",
            "O Google √© como um super detective que encontra qualquer informa√ß√£o em segundos!\n\n" +
                    "Como pesquisar:\n" +
                    "‚Ä¢ Digite palavras-chave no campo de busca\n" +
                    "‚Ä¢ Seja espec√≠fico para melhores resultados\n" +
                    "‚Ä¢ Use aspas para buscar frases exatas\n" +
                    "‚Ä¢ Veja os resultados e clique no que interessa\n\n" +
                    "Dicas de pesquisa:\n" +
                    "‚Ä¢ 'receita bolo chocolate' - para receitas\n" +
                    "‚Ä¢ 'filme 2024 cinema' - para filmes\n" +
                    "‚Ä¢ 'not√≠cias hoje' - para not√≠cias atuais\n" +
                    "‚Ä¢ 'como fazer...' - para tutoriais",
            "üîç",
            "google_pesquisa"
        ),
        Li√ß√£o(
            "Navega√ß√£o Segura",
            "Na internet, assim como na rua, precisamos tomar cuidados para n√£o cair em armadilhas!\n\n" +
                    "Sinais de perigo:\n" +
                    "‚Ä¢ Sites sem 'https://' no in√≠cio\n" +
                    "‚Ä¢ Pop-ups pedindo dados pessoais\n" +
                    "‚Ä¢ Ofertas milagrosas demais para ser verdade\n" +
                    "‚Ä¢ Links enviados por desconhecidos\n\n" +
                    "Dicas de seguran√ßa:\n" +
                    "‚Ä¢ Verifique sempre o cadeado verde no navegador\n" +
                    "‚Ä¢ N√£o clique em links suspeitos\n" +
                    "‚Ä¢ Desconfie de promo√ß√µes absurdas\n" +
                    "‚Ä¢ Mantenha antiv√≠rus atualizado",
            "üõ°Ô∏è",
            "navegacao_segura"
        ),
        Li√ß√£o(
            "Redes Sociais B√°sicas",
            "Redes sociais s√£o como pra√ßas digitais onde encontramos amigos e familiares!\n\n" +
                    "Principais redes:\n" +
                    "‚Ä¢ Facebook: Para conectar com amigos e fam√≠lia\n" +
                    "‚Ä¢ WhatsApp: Para mensagens r√°pidas e chamadas\n" +
                    "‚Ä¢ Instagram: Para fotos e v√≠deos\n" +
                    "‚Ä¢ YouTube: Para ver v√≠deos sobre tudo\n\n" +
                    "Como usar com seguran√ßa:\n" +
                    "‚Ä¢ Configure a privacidade das suas informa√ß√µes\n" +
                    "‚Ä¢ N√£o aceite estranhos como amigos\n" +
                    "‚Ä¢ Pense antes de postar - a internet n√£o esquece\n" +
                    "‚Ä¢ Cuidado com informa√ß√µes pessoais",
            "üë•",
            "redes_sociais"
        )
    )

    private val li√ß√µesEspanol = listOf(
        Li√ß√£o(
            "Conociendo Internet",
            "¬°Internet es como una gran ciudad digital donde puedes visitar lugares, conversar con personas y aprender cosas nuevas!\n\n" +
                    "‚Ä¢ Navegador: Tu auto para viajar por internet\n" +
                    "‚Ä¢ Sitio web: Un lugar que visitas (tienda, biblioteca, peri√≥dico)\n" +
                    "‚Ä¢ Enlace: Una calle que lleva a otros lugares\n" +
                    "‚Ä¢ URL: La direcci√≥n exacta de cada sitio\n" +
                    "‚Ä¢ Wi-Fi: Conexi√≥n inal√°mbrica a internet\n\n" +
                    "Consejo: ¬°Internet es como una biblioteca gigante - puedes encontrar informaci√≥n sobre cualquier tema!",
            "üåê",
            "internet_introduccion"
        ),
        Li√ß√£o(
            "Mi Primer Navegador",
            "¬°El navegador es el programa que abre las puertas de internet. Es como tener un auto para viajar por el mundo digital!\n\n" +
                    "Partes del navegador:\n" +
                    "‚Ä¢ Barra de direcciones: Donde escribes el destino\n" +
                    "‚Ä¢ Botones atr√°s/adelante: Como espejo retrovisor del auto\n" +
                    "‚Ä¢ Bot√≥n actualizar: Para recargar la p√°gina\n" +
                    "‚Ä¢ Favoritos: Tus lugares preferidos guardados\n" +
                    "‚Ä¢ Historial: Donde ya has estado\n\n" +
                    "C√≥mo usar:\n" +
                    "1. Escribe la direcci√≥n en la barra (ej: google.com)\n" +
                    "2. Presiona Enter para viajar\n" +
                    "3. Usa los botones para navegar entre p√°ginas",
            "üöó",
            "navegador_partes"
        ),
        Li√ß√£o(
            "Google - Encontrando Todo",
            "¬°Google es como un s√∫per detective que encuentra cualquier informaci√≥n en segundos!\n\n" +
                    "C√≥mo buscar:\n" +
                    "‚Ä¢ Escribe palabras clave en el campo de b√∫squeda\n" +
                    "‚Ä¢ S√© espec√≠fico para mejores resultados\n" +
                    "‚Ä¢ Usa comillas para buscar frases exactas\n" +
                    "‚Ä¢ Ve los resultados y haz clic en lo que interesa\n\n" +
                    "Consejos de b√∫squeda:\n" +
                    "‚Ä¢ 'receta pastel chocolate' - para recetas\n" +
                    "‚Ä¢ 'pel√≠cula 2024 cine' - para pel√≠culas\n" +
                    "‚Ä¢ 'noticias hoy' - para noticias actuales\n" +
                    "‚Ä¢ 'c√≥mo hacer...' - para tutoriales",
            "üîç",
            "google_busqueda"
        ),
        Li√ß√£o(
            "Navegaci√≥n Segura",
            "¬°En internet, igual que en la calle, necesitamos tener cuidado para no caer en trampas!\n\n" +
                    "Se√±ales de peligro:\n" +
                    "‚Ä¢ Sitios sin 'https://' al inicio\n" +
                    "‚Ä¢ Pop-ups pidiendo datos personales\n" +
                    "‚Ä¢ Ofertas milagrosas demasiado buenas para ser verdad\n" +
                    "‚Ä¢ Enlaces enviados por desconocidos\n\n" +
                    "Consejos de seguridad:\n" +
                    "‚Ä¢ Verifica siempre el candado verde en el navegador\n" +
                    "‚Ä¢ No hagas clic en enlaces sospechosos\n" +
                    "‚Ä¢ Desconf√≠a de promociones absurdas\n" +
                    "‚Ä¢ Mant√©n el antivirus actualizado",
            "üõ°Ô∏è",
            "navegacion_segura"
        ),
        Li√ß√£o(
            "Redes Sociales B√°sicas",
            "¬°Las redes sociales son como plazas digitales donde encontramos amigos y familiares!\n\n" +
                    "Principales redes:\n" +
                    "‚Ä¢ Facebook: Para conectar con amigos y familia\n" +
                    "‚Ä¢ WhatsApp: Para mensajes r√°pidos y llamadas\n" +
                    "‚Ä¢ Instagram: Para fotos y videos\n" +
                    "‚Ä¢ YouTube: Para ver videos sobre todo\n\n" +
                    "C√≥mo usar con seguridad:\n" +
                    "‚Ä¢ Configura la privacidad de tu informaci√≥n\n" +
                    "‚Ä¢ No aceptes extra√±os como amigos\n" +
                    "‚Ä¢ Piensa antes de publicar - internet no olvida\n" +
                    "‚Ä¢ Cuidado con informaci√≥n personal",
            "üë•",
            "redes_sociales"
        )
    )


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_desktop) // Usa o mesmo layout do Desktop

        // Configurar idioma
        idioma = intent.getStringExtra("IDIOMA") ?: "pt"

        // Configurar t√≠tulo
        val txtTituloTela = findViewById<TextView>(R.id.txtTituloTela)
        txtTituloTela.text = if (idioma == "es") "Internet - Navegaci√≥n" else "Internet - Navega√ß√£o"

        // Inicializar componentes
        tts = TextToSpeech(this, this)
        configurarBotoes()
        configurarCliqueImagem()
        mostrarLicaoAtual()
    }


    private fun criarImagensPlaceholder() {
        println("üîÑ CRIANDO IMAGENS PLACEHOLDER PARA DESKTOP")

        val li√ß√µes = if (idioma == "es") li√ß√µesEspanol else li√ß√µesPortugues
        li√ß√µes.forEachIndexed { index, li√ß√£o ->
            val resourceId = resources.getIdentifier(li√ß√£o.imagem, "drawable", packageName)
            if (resourceId == 0) {
                println("‚ùå FALTANDO: ${li√ß√£o.imagem} para li√ß√£o ${index + 1}")
            } else {
                println("‚úÖ EXISTE: ${li√ß√£o.imagem}")
            }
        }
    }

    private fun configurarCliqueImagem() {
        val imgLicao = findViewById<ImageView>(R.id.imgLicao)

        imgLicao.setOnClickListener {
            val li√ß√µes = if (idioma == "es") li√ß√µesEspanol else li√ß√µesPortugues
            val li√ß√£o = li√ß√µes[li√ß√£oAtual]

            val intent = Intent(this, ImageFullscreenActivity::class.java)
            intent.putExtra("NOME_IMAGEM", li√ß√£o.imagem)
            startActivity(intent)
        }
    }

    private fun configurarBotoes() {
        val btnVoltar = findViewById<ImageButton>(R.id.btnVoltarDesktop)
        val btnAnterior = findViewById<Button>(R.id.btnAnterior)
        val btnProximo = findViewById<Button>(R.id.btnProximo)
        val btnOuvir = findViewById<ImageButton>(R.id.btnOuvirLicao)
        val btnQuiz = findViewById<Button>(R.id.btnQuiz)

        // Bot√£o Voltar
        btnVoltar.setOnClickListener {
            pausarAudio()
            finish()
        }

        // Bot√£o Anterior
        btnAnterior.setOnClickListener {
            pausarAudio()
            if (li√ß√£oAtual > 0) {
                li√ß√£oAtual--
                mostrarLicaoAtual()
            }
        }

        // Bot√£o Pr√≥ximo
        btnProximo.setOnClickListener {
            pausarAudio()
            val li√ß√µes = if (idioma == "es") li√ß√µesEspanol else li√ß√µesPortugues

            if (li√ß√£oAtual < li√ß√µes.size - 1) {
                li√ß√£oAtual++
                mostrarLicaoAtual()
            } else {
                val mensagem = if (idioma == "es") {
                    "¬°Felicitaciones! Completaste el m√≥dulo Internet! üéâ"
                } else {
                    "Parab√©ns! Voc√™ completou o m√≥dulo Internet! üéâ"
                }
                Toast.makeText(this, mensagem, Toast.LENGTH_LONG).show()
                btnQuiz.visibility = View.VISIBLE
            }
        }

        // Bot√£o Ouvir
        btnOuvir.setOnClickListener {
            if (tts.isSpeaking) {
                pausarAudio()
                btnOuvir.setImageResource(android.R.drawable.ic_media_play)
            } else {
                falarLicaoAtual()
                btnOuvir.setImageResource(android.R.drawable.ic_media_pause)
            }
        }

        // No InternetActivity - fun√ß√£o do bot√£o Quiz
        btnQuiz.setOnClickListener {
            val intent = Intent(this, QuizActivity::class.java)
            intent.putExtra("IDIOMA", idioma)
            intent.putExtra("MODULO", "Internet") // DEVE SER "Internet"
            startActivity(intent)
        }
    }

    private fun mostrarLicaoAtual() {
        val li√ß√µes = if (idioma == "es") li√ß√µesEspanol else li√ß√µesPortugues
        val li√ß√£o = li√ß√µes[li√ß√£oAtual]

        findViewById<TextView>(R.id.txtTituloLicao).text = li√ß√£o.titulo
        findViewById<TextView>(R.id.txtConteudoLicao).text = li√ß√£o.conteudo

        val textoProgresso = if (idioma == "es") {
            "Lecci√≥n ${li√ß√£oAtual + 1} de ${li√ß√µes.size}"
        } else {
            "Li√ß√£o ${li√ß√£oAtual + 1} de ${li√ß√µes.size}"
        }
        findViewById<TextView>(R.id.txtProgresso).text = textoProgresso

        carregarImagemLicao(findViewById(R.id.imgLicao), li√ß√£o.imagem)

        val btnAnterior = findViewById<Button>(R.id.btnAnterior)
        val btnProximo = findViewById<Button>(R.id.btnProximo)
        val btnQuiz = findViewById<Button>(R.id.btnQuiz)
        val btnOuvir = findViewById<ImageButton>(R.id.btnOuvirLicao)

        btnOuvir.setImageResource(android.R.drawable.ic_media_play)
        pausarAudio()

        btnAnterior.isEnabled = li√ß√£oAtual > 0

        if (li√ß√£oAtual == li√ß√µes.size - 1) {
            btnProximo.text = if (idioma == "es") "Fim" else "Fim"
            btnQuiz.visibility = View.VISIBLE
        } else {
            btnProximo.text = if (idioma == "es") "Sig" else "Pr√≥x"
            btnQuiz.visibility = View.GONE
        }
    }

    private fun carregarImagemLicao(imageView: ImageView, nomeImagem: String) {
        try {
            val resourceId = resources.getIdentifier(nomeImagem, "drawable", packageName)
            if (resourceId != 0) {
                imageView.setImageResource(resourceId)
            } else {
                imageView.setImageResource(android.R.drawable.ic_menu_help)
                println("AVISO: Imagem n√£o encontrada: $nomeImagem")
            }
        } catch (e: Exception) {
            imageView.setImageResource(android.R.drawable.ic_menu_help)
            println("ERRO ao carregar imagem $nomeImagem: ${e.message}")
        }
    }

    private fun falarLicaoAtual() {
        if (!ttsInicializado) {
            val mensagem = if (idioma == "es") "Sistema de voz a√∫n no est√° listo" else "Sistema de voz ainda n√£o est√° pronto"
            Toast.makeText(this, mensagem, Toast.LENGTH_SHORT).show()
            return
        }

        pausarAudio()

        val li√ß√µes = if (idioma == "es") li√ß√µesEspanol else li√ß√µesPortugues
        val li√ß√£o = li√ß√µes[li√ß√£oAtual]
        val locale = if (idioma == "es") Locale("es", "ES") else Locale("pt", "BR")
        tts.language = locale

        val textoParaFalar = "${li√ß√£o.titulo}. . . ${li√ß√£o.conteudo}"
        tts.speak(textoParaFalar, TextToSpeech.QUEUE_FLUSH, null, "li√ß√£o_${li√ß√£oAtual}")

        val mensagemAudio = if (idioma == "es") "Reproduciendo lecci√≥n..." else "Reproduzindo li√ß√£o..."
        Toast.makeText(this, mensagemAudio, Toast.LENGTH_SHORT).show()
    }

    private fun pausarAudio() {
        if (ttsInicializado && tts.isSpeaking) {
            tts.stop()
            val btnOuvir = findViewById<ImageButton>(R.id.btnOuvirLicao)
            btnOuvir.setImageResource(android.R.drawable.ic_media_play)
            audioPausado = false
            val mensagem = if (idioma == "es") "Audio pausado" else "√Åudio pausado"
            Toast.makeText(this, mensagem, Toast.LENGTH_SHORT).show()
        }
    }





    override fun onInit(status: Int) {
        if (status == TextToSpeech.SUCCESS) {
            ttsInicializado = true
            val locale = if (idioma == "es") Locale("es", "ES") else Locale("pt", "BR")
            val result = tts.setLanguage(locale)

            if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {
                Toast.makeText(this, "Idioma n√£o suportado", Toast.LENGTH_SHORT).show()
            }
        } else {
            ttsInicializado = false
            Toast.makeText(this, "Erro no sistema de voz", Toast.LENGTH_SHORT).show()
        }
    }



    override fun onDestroy() {
        if (ttsInicializado) {
            tts.stop()
            tts.shutdown()
        }
        super.onDestroy()
    }
}

